$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
) !default;

flex-grid {
  --xs: 1;
  --sm: 1;
  --md: 1;
  --xl: 1;
  --xxl: 1;
  --gx: 1;
  --gy: 1;
  --align: flex-start;
  --justify: center;
  --direction: row;
  --wrap: wrap;
  --mw: 10ch;
  --unit: 1.5rem;

  position: relative;
  display: flex;
  flex-direction: var(--direction);
  flex-wrap: var(--wrap);
  justify-content: var(--justify);
  align-items: var(--align);
  margin-left: calc(-1 * var(--unit) * var(--gx));
  margin-top: calc(-1 * var(--unit) * var(--gy));

  & + flex-grid {
    margin-top: 0;
  }

  > * {
    box-sizing: border-box;
    display: var(--xs-d, "block");
    /* autoprefixer: ignore next */
    order: var(--o, 2); // Support for order-first, order-last
    max-width: var(--w, 100%);
    // By default, flex items wonâ€™t shrink below their minimum content size
    min-width: var(--mw, 10ch);
    // flex-grow: 1;flex-shrink: 0;flex-basis: 0%;
    flex: var(--grow, 1) 0 0%;
    align-self: var(--align, "flex-start");

    margin-right: 0;
    margin-bottom: 0;
    margin-left: calc(var(--unit) * var(--gx));
    margin-top: calc(var(--unit) * var(--gy));
  }

  &[xs],
  &[sm],
  &[md],
  &[lg],
  &[xl],
  &[xxl] {
    > * {
      // flex-grow: 0;flex-shrink: 0;flex-basis: auto;
      flex: 0 0 auto;
    }
  }

  // Collapse by default on xs
  &[sm],
  &[md],
  &[lg],
  &[xl],
  &[xxl] {
    > * {
      width: calc((100% - (var(--unit) * var(--gx))));
    }
  }

  &[xs] > * {
    width: calc((100% / var(--xs, 1)) - (var(--unit) * var(--gx)));
  }

  // Small devices (landscape phones, 576px and up)
  @media (min-width: map-get($map: $grid-breakpoints, $key: "sm")) {
    & > * {
      display: var(--sm-d, "inherit");
    }
    &[sm] > * {
      width: calc((100% / var(--sm, 1)) - (var(--unit) * var(--gx)));
    }
  }

  // Medium devices (tablets, 768px and up)
  @media (min-width: map-get($map: $grid-breakpoints, $key: "md")) {
    & > * {
      display: var(--md-d, var(--sm-d, "inherit"));
    }
    &[md] > * {
      width: calc((100% / var(--md, 1)) - (var(--unit) * var(--gx)));
    }
  }

  // Large devices (desktops, 992px and up)
  @media (min-width: map-get($map: $grid-breakpoints, $key: "lg")) {
    & > * {
      display: var(--lg-d, var(--md-d, var(--sm-d, "inherit")));
    }
    &[lg] > * {
      width: calc((100% / var(--lg, 1)) - (var(--unit) * var(--gx)));
    }
  }

  // X-Large devices (large desktops, 1200px and up)
  @media (min-width: map-get($map: $grid-breakpoints, $key: "xl")) {
    & > * {
      display: var(--xl-d, var(--lg-d, var(--md-d, var(--sm-d, "inherit"))));
    }
    &[xl] > * {
      width: calc((100% / var(--xl, 1)) - (var(--unit) * var(--gx)));
    }
  }

  // XX-Large devices (larger desktops, 1400px and up)
  @media (min-width: map-get($map: $grid-breakpoints, $key: "xxl")) {
    & > * {
      display: var(--xxl-d, var(--xl-d, var(--lg-d, var(--md-d, var(--sm-d, "inherit")))));
    }
    &[xxl] > * {
      width: calc((100% / var(--xxl, 1)) - (var(--unit) * var(--gx)));
    }
  }
}

.flex-grid-alternate {
  > :nth-child(even) {
    > :first-child {
      /* autoprefixer: ignore next */
      order: 3;
    }
    > :last-child {
      /* autoprefixer: ignore next */
      order: 1;
    }
  }
}

//TODO: implement mansonry https://tobiasahlin.com/blog/masonry-with-css/
