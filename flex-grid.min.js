(()=>{const e=window.FlexGrid&&window.FlexGrid.debug||!1,t={g:["gx","gy"]},l={start:"flex-start",end:"flex-end"},s=["g","gx","gy","xs","sm","md","lg","xl","xxl","align","justify","mw","unit","direction","wrap"];class r extends HTMLElement{constructor(){super()}static log(t){e&&console.log("[flex-grid] "+t)}static get observedAttributes(){return s}static updateStyle(e,s,r){let i=e.getAttribute("style"),n=[];i&&(n=i.split(";"));let a=[s];l[r]&&(r=l[r]),t[s]&&(a=t[s]);for(let e=0;e<a.length;e++){let t="--"+a[e];n=n.filter(e=>!e.includes(t)),n.push(t+":"+r)}e.setAttribute("style",n.join(";"))}attributeChangedCallback(e,t,l){r.updateStyle(this,e,l)}connectedCallback(){}}class i extends HTMLElement{constructor(){super()}static get observedAttributes(){return["o","w","mw","col","align","justify","grow","d-xs","d-sm","d-md","d-lg","d-xl","d-xxl"]}attributeChangedCallback(e,t,l){r.updateStyle(this,e,l)}connectedCallback(){}}class n extends HTMLElement{constructor(){super()}static get observedAttributes(){return s}attributeChangedCallback(e,t,l){let s=this.querySelector("flex-grid");s&&r.updateStyle(s,e,l)}connectedCallback(){null===this.querySelector("flex-grid")&&(this.innerHTML="<flex-grid>"+this.innerHTML+"</flex-grid>");let e=this.querySelector("flex-grid");Array.prototype.slice.call(this.attributes).forEach(t=>{s.includes(t.name)&&(r.updateStyle(e,t.name,t.value),e.setAttribute(t.name,t.value))})}}customElements.define("flex-grid",r),customElements.define("flex-col",i),customElements.define("flex-container",n)})();